-- Create the job_listings table
CREATE TABLE job_listings (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    user_id UUID REFERENCES auth.users(id) NOT NULL,
    job_title TEXT NOT NULL,
    company_name TEXT NOT NULL,
    city TEXT NOT NULL,
    country TEXT NOT NULL,
    job_type TEXT NOT NULL,
    salary_min NUMERIC,
    salary_max NUMERIC,
    salary_currency TEXT,
    job_description TEXT NOT NULL,
    requirements TEXT,
    benefits TEXT,
    application_deadline DATE,
    contact_email TEXT NOT NULL,
    contact_phone TEXT,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT TIMEZONE('utc'::TEXT, NOW()) NOT NULL,
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT TIMEZONE('utc'::TEXT, NOW()) NOT NULL
);

-- Create an index on user_id for faster queries
CREATE INDEX idx_job_listings_user_id ON job_listings(user_id);

-- Create an index on country for faster queries
CREATE INDEX idx_job_listings_country ON job_listings(country);

-- Enable Row Level Security (RLS)
ALTER TABLE job_listings ENABLE ROW LEVEL SECURITY;

-- Create a policy to allow users to insert their own job listings
CREATE POLICY "Users can insert their own job listings" ON job_listings FOR INSERT WITH CHECK (auth.uid() = user_id);

-- Create a policy to allow users to update their own job listings
CREATE POLICY "Users can update their own job listings" ON job_listings FOR UPDATE USING (auth.uid() = user_id);

-- Create a policy to allow users to delete their own job listings
CREATE POLICY "Users can delete their own job listings" ON job_listings FOR DELETE USING (auth.uid() = user_id);

-- Create a policy to allow all authenticated users to view all job listings
CREATE POLICY "Authenticated users can view all job listings" ON job_listings FOR SELECT USING (auth.role() = 'authenticated');

-- Function to automatically update the updated_at timestamp
CREATE OR REPLACE FUNCTION update_modified_column()
RETURNS TRIGGER AS $$
BEGIN
    NEW.updated_at = NOW();
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

-- Trigger to call the update_modified_column function
CREATE TRIGGER update_job_listings_modtime
BEFORE UPDATE ON job_listings
FOR EACH ROW
EXECUTE FUNCTION update_modified_column();
